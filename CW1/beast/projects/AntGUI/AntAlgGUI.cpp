// -*- C++ -*- generated by wxGlade 0.6.3 on Wed Apr 29 01:16:29 2009

#include "AntAlgGUI.h"

// begin wxGlade: ::extracode

// end wxGlade
BEGIN_EVENT_TABLE(AntAlgGUI, wxFrame)
  EVT_BUTTON(ID_START_SORT, AntAlgGUI::OnStartSort)
  EVT_BUTTON(ID_START_CLUSTER, AntAlgGUI::OnStartCluster)
END_EVENT_TABLE()


AntAlgGUI::AntAlgGUI(Simulation* sim) : wxFrame((wxFrame *)NULL, wxID_ANY, _T("Ant Sorting Simulations"), wxPoint(50,50), wxSize(450,340), wxMINIMIZE_BOX | wxMAXIMIZE_BOX | wxRESIZE_BORDER)
{
    simulation = sim;
    // begin wxGlade: AntAlgGUI::AntAlgGUI
    algorithmTabs = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    clusterPane = new wxPanel(algorithmTabs, wxID_ANY);
    lFAlgPane = new wxPanel(algorithmTabs, wxID_ANY);
    colourBox_staticbox = new wxStaticBox(lFAlgPane, -1, wxT("Colours"));
    paramBox_staticbox = new wxStaticBox(lFAlgPane, -1, wxT("Algorithm Parameters"));
    sizer_1_staticbox = new wxStaticBox(clusterPane, -1, wxT("Algorithm Params"));
    defaultSplit_staticbox = new wxStaticBox(this, -1, wxT("Ants and Items"));
    antsLabel = new wxStaticText(this, wxID_ANY, wxT("Number of Ants :"));
    antsSpin = new wxSpinCtrl(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 1000);
    itemLabel = new wxStaticText(this, wxID_ANY, wxT("Number of Items :"));
    itemSpin = new wxSpinCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 10000);
    redCheck = new wxCheckBox(lFAlgPane, wxID_ANY, wxT("Red"));
    greenCheck = new wxCheckBox(lFAlgPane, wxID_ANY, wxT("Green"));
    blueCheck = new wxCheckBox(lFAlgPane, wxID_ANY, wxT("Blue"));
    k1Label = new wxStaticText(lFAlgPane, wxID_ANY, wxT("k1 :"));
    k1Text = new wxTextCtrl(lFAlgPane, wxID_ANY, wxT("0.1"));
    k2Label = new wxStaticText(lFAlgPane, wxID_ANY, wxT("k2 :"));
    k2Text = new wxTextCtrl(lFAlgPane, wxID_ANY, wxT("0.15"));
    alphaLabel = new wxStaticText(lFAlgPane, wxID_ANY, wxT("alpha :"));
    alphaText = new wxTextCtrl(lFAlgPane, wxID_ANY, wxT("0.5"));
    areaLabel = new wxStaticText(lFAlgPane, wxID_ANY, wxT("area :"));
    areaText = new wxTextCtrl(lFAlgPane, wxID_ANY, wxT("9"));
    radiusLabel = new wxStaticText(lFAlgPane, wxID_ANY, wxT("radius :"));
    radiusText = new wxTextCtrl(lFAlgPane, wxID_ANY, wxT("4.5"));
    lFButton = new wxButton(lFAlgPane, ID_START_SORT, wxT("Start"));
    k1LabelC = new wxStaticText(clusterPane, wxID_ANY, wxT("k1"));
    k1TextC = new wxTextCtrl(clusterPane, wxID_ANY, wxT("0.1"));
    k2LabelC = new wxStaticText(clusterPane, wxID_ANY, wxT("k2"));
    k2TextC = new wxTextCtrl(clusterPane, wxID_ANY, wxT("0.3"));
    radiusLabelC = new wxStaticText(clusterPane, wxID_ANY, wxT("radius"));
    radiusTextC = new wxTextCtrl(clusterPane, wxID_ANY, wxT("4.5"));
    areaLabelC = new wxStaticText(clusterPane, wxID_ANY, wxT("area"));
    areaTextC = new wxTextCtrl(clusterPane, wxID_ANY, wxT("9"));
    startClusterButton = new wxButton(clusterPane, ID_START_CLUSTER, wxT("Start"));

    set_properties();
    do_layout();
    // end wxGlade
}

void AntAlgGUI::OnStartCluster(wxCommandEvent& event)
{

  int numAnts = antsSpin->GetValue();
  int numItems = itemSpin->GetValue();
  Group<ClusterAnt>* ants = new Group<ClusterAnt>(0);
  Group<Leaf>* items = new Group<Leaf>(numItems);
	
	double k1;
	double k2;
	double radius;
	double area;
	
	k1TextC->GetValue().ToDouble(&k1);
	k2TextC->GetValue().ToDouble(&k2);
	radiusTextC->GetValue().ToDouble(&radius);
	areaTextC->GetValue().ToDouble(&area);
	
	for (int i = 0; i < numAnts; i++)
	{
	  ClusterAnt* ant = new ClusterAnt();
	  ant->SetK1(k1);
	  ant->SetK2(k2);
	  ant->SetRadius(radius);
	  ant->SetArea(area);
	  
	  ants->push_back(ant);
	}
	
	simulation->Add("Ants", *ants);
	simulation->Add("Items", *items);
	
	Show(FALSE);
	simulation->Init();
	
}

void AntAlgGUI::OnStartSort(wxCommandEvent& event)
{
  int numAnts = antsSpin->GetValue();
  int numItems = itemSpin->GetValue();
  Group<SortingAnt>* ants = new Group<SortingAnt>(0);
  Group<MultiColourLeaf>* items = new Group<MultiColourLeaf>(numItems);
	
	double k1;
	double k2;
	double alpha;
	double radius;
	double area;
	
	k1Text->GetValue().ToDouble(&k1);
	k2Text->GetValue().ToDouble(&k2);
	alphaText->GetValue().ToDouble(&alpha);
	radiusText->GetValue().ToDouble(&radius);
	areaText->GetValue().ToDouble(&area);
	
	for (int i = 0; i < numAnts; i++)
	{
	  SortingAnt* ant = new SortingAnt();
	  ant->SetK1(k1);
	  ant->SetK2(k2);
	  ant->SetAlpha(alpha);
	  ant->SetRadius(radius);
	  ant->SetArea(area);
	  
	  ants->push_back(ant);
	}
	
	simulation->Add("Ants", *ants);
	simulation->Add("Items", *items);
	
	Show(FALSE);
	simulation->Init();
}

void AntAlgGUI::set_properties()
{
    // begin wxGlade: AntAlgGUI::set_properties
    SetTitle(wxT("Ant Algorithm GUI"));
    redCheck->SetValue(1);
    // end wxGlade
}


void AntAlgGUI::do_layout()
{
    // begin wxGlade: AntAlgGUI::do_layout
    wxFlexGridSizer* splitter = new wxFlexGridSizer(2, 1, 0, 0);
    wxStaticBoxSizer* sizer_1 = new wxStaticBoxSizer(sizer_1_staticbox, wxHORIZONTAL);
    wxGridSizer* grid_sizer_1 = new wxGridSizer(5, 2, 0, 0);
    wxFlexGridSizer* lFSplit = new wxFlexGridSizer(2, 1, 0, 0);
    wxStaticBoxSizer* paramBox = new wxStaticBoxSizer(paramBox_staticbox, wxVERTICAL);
    wxFlexGridSizer* paramGrid = new wxFlexGridSizer(5, 2, 4, 4);
    wxStaticBoxSizer* colourBox = new wxStaticBoxSizer(colourBox_staticbox, wxVERTICAL);
    wxFlexGridSizer* colourGrid = new wxFlexGridSizer(3, 1, 4, 4);
    wxStaticBoxSizer* defaultSplit = new wxStaticBoxSizer(defaultSplit_staticbox, wxVERTICAL);
    wxFlexGridSizer* defaultSizer = new wxFlexGridSizer(2, 2, 5, 4);
    defaultSizer->Add(antsLabel, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    defaultSizer->Add(antsSpin, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    defaultSizer->Add(itemLabel, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    defaultSizer->Add(itemSpin, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    defaultSplit->Add(defaultSizer, 1, wxEXPAND, 0);
    splitter->Add(defaultSplit, 1, wxEXPAND, 0);
    colourGrid->Add(redCheck, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    colourGrid->Add(greenCheck, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    colourGrid->Add(blueCheck, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    colourBox->Add(colourGrid, 1, wxEXPAND, 0);
    lFSplit->Add(colourBox, 1, wxEXPAND, 0);
    paramGrid->Add(k1Label, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    paramGrid->Add(k1Text, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    paramGrid->Add(k2Label, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    paramGrid->Add(k2Text, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    paramGrid->Add(alphaLabel, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    paramGrid->Add(alphaText, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    paramGrid->Add(areaLabel, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    paramGrid->Add(areaText, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    paramGrid->Add(radiusLabel, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    paramGrid->Add(radiusText, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    paramBox->Add(paramGrid, 1, wxEXPAND, 0);
    lFSplit->Add(paramBox, 1, wxEXPAND, 0);
    lFSplit->Add(lFButton, 0, wxALIGN_RIGHT|wxADJUST_MINSIZE, 0);
    lFAlgPane->SetSizer(lFSplit);
    grid_sizer_1->Add(k1LabelC, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(k1TextC, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(k2LabelC, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(k2TextC, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(radiusLabelC, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(radiusTextC, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(areaLabelC, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(areaTextC, 0, wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 0);
    grid_sizer_1->Add(startClusterButton, 0, wxADJUST_MINSIZE, 0);
    sizer_1->Add(grid_sizer_1, 1, wxEXPAND, 0);
    clusterPane->SetSizer(sizer_1);
    algorithmTabs->AddPage(lFAlgPane, wxT("Lumer/Faieta Sorting"));
    algorithmTabs->AddPage(clusterPane, wxT("Deneubourg Cluster"));
    splitter->Add(algorithmTabs, 1, wxEXPAND, 0);
    SetSizer(splitter);
    splitter->Fit(this);
    Layout();
    Centre();
    // end wxGlade
}

